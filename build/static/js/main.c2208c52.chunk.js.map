{"version":3,"sources":["Components/FilterResults/FilterResults.js","Containers/ListingPage/ListingPage.js","Components/Pagination/Pagination.js","Containers/ResultsPage/ResultsPage.js","Components/Carousel/Carousel.js","Components/Results/Results.js","Components/Autocomplete/Autocomplete.js","Containers/SearchPage/SearchPage.js","App.js","reportWebVitals.js","index.js"],"names":["FilterResults","props","Price","increment","i","push","id","Accordion","Card","Header","Toggle","as","Button","variant","eventKey","Collapse","Form","className","Group","controlId","Label","Control","onChange","target","setMinPrice","value","custom","map","index","numberFormat","setMaxPrice","setSort","setMinSqft","setMaxSqft","setMinBedrooms","setMinBathrooms","setPropertyType","ListingPage","listings","Array","from","posts","highResImg","img","thumbnail","replace","propertyID","property_id","to","pathname","state","location","listing","dataRecieved","style","backgroundImage","backgroundSize","overflow","margin","backgroundPosition","address","line","postal_code","numberWithCommas","price","loading","Spinner","animation","size","Pagination","postsPerPage","totalPosts","paginate","pageNumbers","Math","ceil","number","onClick","e","preventDefault","href","ResultsPage","useState","minPrice","maxPrice","sort","setDataRecieved","minSqft","maxSqft","minBedrooms","minBathrooms","propertyType","currentPage","setCurrentPage","setPosts","history","useHistory","x","toString","getListings","a","fetch","cityListings","stateListings","response","json","jsonResponse","properties","useEffect","userInput","indexOfLastPost","indexOfFirstPost","currentPosts","slice","cities","length","pageNumber","goBack","ControlledCarousel","carouselItems","setIndex","picturesRecieved","pictures","photos","Carousel","Item","src","alt","activeIndex","onSelect","selectedIndex","Results","setPictures","setPicturesRecieved","virtualTour","description","highRes","lotSize","taxHistory","buildingSize","beds","baths","garage","year_built","stories","getPictures","virtual_tour","block","window","assign","building_size","agents","photo","lot_size","tax_history","tax","city","Figure","Caption","Table","striped","bordered","hover","colSpan","Body","Title","branding","listing_agent","details","name","Img","width","Text","email","phone","broker","listing_office","Autocomplete","optionList","showOptions","cityArray","ListGroup","setStateListings","state_code","setCityListings","setShowOptions","setUserInput","Fragment","autoComplete","currentTarget","type","placeholder","SearchPage","setCities","getData","autocomplete","items","App","path","component","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c2208c52.chunk.js","sourcesContent":["import React from 'react';\nimport Form from 'react-bootstrap/Form'\nimport Accordion from 'react-bootstrap/Accordion';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\n\n//Function to filter the listings.\nexport function FilterResults(props) {\n\n    //Creates the option values for the drop downs minPrice, and maxPrice.\n    let Price = [];\n    let increment = 100000;\n    for (let i = 0; i < 15; i++) {\n        if (increment >= 1000000) {\n            increment = increment + 400000;\n        }\n        increment = increment + 100000;\n        Price.push(increment);\n    }\n\n    //Creating array of values for the filtering drop downs\n    let minSqft = [1000, 2000, 3000, 4000, 5000, 7500, 10000];\n    let maxSqft = [2000, 3000, 4000, 5000, 7500, 10000, 15000];\n    let minBedrooms = [1, 2, 3, 4, 5, 6, 7, 8];\n    let minBathrooms = [1, 2, 3, 4, 5, 6, 7, 8];\n\n    //Returns all the drop downs with mapped values from their corresponding arrays.\n    return (\n        <div id=\"filterResults\">\n            <Accordion>\n                <Card>\n                    <Card.Header>\n                        <Accordion.Toggle as={Button} id=\"filterButton\" variant=\"outline-primary\" eventKey=\"0\">\n                            Filter Results\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"0\">\n                        <Form className=\"filterResultsContainer\">\n                            <Form.Group controlId=\"exampleForm.SelectCustom\">\n                                <div className=\"filterItem\">\n                                    <Form.Label>Min Price</Form.Label>\n                                    <Form.Control as=\"select\" onChange={({ target }) => props.setMinPrice(target.value)} custom>\n                                        <option>Any Min Price</option>\n                                        {Price.map((value, index) => <option key={index} value={value}>{'$' + props.numberFormat(value)}</option>)}\n                                    </Form.Control>\n                                </div>\n\n                                <div className=\"filterItem\">\n                                    <Form.Label>Max Price</Form.Label>\n                                    <Form.Control onChange={({ target }) => props.setMaxPrice(target.value)} as=\"select\" custom>\n                                        <option>Any Max Price</option>\n                                        {Price.map((value, index) => <option key={index} value={value}>{'$' + props.numberFormat(value)}</option>)}\n                                    </Form.Control>\n                                </div>\n                                <div className=\"filterItem\">\n                                    <Form.Label>Sort By</Form.Label>\n                                    <Form.Control as=\"select\" onChange={({ target }) => props.setSort(target.value)} custom>\n                                        <option>Sort</option>\n                                        <option value='relevance'>Relevance</option>\n                                        <option value='price_low'>Low Price</option>\n                                        <option value='price_high'>High Price</option>\n                                        <option value='photos'>Most Photos</option>\n                                        <option value='sqft_high'>High Sqft</option>\n                                    </Form.Control>\n                                </div>\n\n                                <div className=\"filterItem\">\n                                    <Form.Label>House Min Sqft</Form.Label>\n                                    <Form.Control as=\"select\" onChange={({ target }) => props.setMinSqft(target.value)} custom>\n                                        <option>Min Sqft</option>\n                                        {minSqft.map((value, index) => <option key={index} value={value}>{props.numberFormat(value) + 'Sqft'}</option>)}\n                                    </Form.Control>\n                                </div>\n\n                                <div className=\"filterItem\">\n                                    <Form.Label>House Max Sqft</Form.Label>\n                                    <Form.Control as=\"select\" onChange={({ target }) => props.setMaxSqft(target.value)} custom>\n                                        <option>Max Sqft</option>\n                                        {maxSqft.map((value, index) => <option key={index} value={value}>{props.numberFormat(value) + 'Sqft'}</option>)}\n                                    </Form.Control>\n                                </div>\n\n                                <div className=\"filterItem\">\n                                    <Form.Label>Min Bedrooms</Form.Label>\n                                    <Form.Control as=\"select\" onChange={({ target }) => props.setMinBedrooms(target.value)} custom>\n                                        <option>Min Beds</option>\n                                        {minBedrooms.map((value, index) => <option key={index} value={value}>{props.numberFormat(value)}</option>)}\n                                    </Form.Control>\n                                </div>\n                                <div className=\"filterItem\">\n                                    <Form.Label>Min Bathrooms</Form.Label>\n                                    <Form.Control as=\"select\" onChange={({ target }) => props.setMinBathrooms(target.value)} custom>\n                                        <option>Min Bathrooms</option>\n                                        {minBathrooms.map((value, index) => <option key={index} value={value}>{props.numberFormat(value)}</option>)}\n                                    </Form.Control>\n                                </div>\n                                <div className=\"filterItem\">\n                                    <Form.Label>Property Type</Form.Label>\n                                    <Form.Control as=\"select\" onChange={({ target }) => props.setPropertyType(target.value)} custom>\n                                        <option>Type</option>\n                                        <option value='single_family'>Single Family</option>\n                                        <option value='multi_family'>Multi Family</option>\n                                        <option value='condo'>Condominium</option>\n                                        <option value='mobile'>Mobile Home</option>\n                                        <option value='land'>Land</option>\n                                        <option value='farm'>Farm</option>\n                                        <option value='other'>Other</option>\n                                    </Form.Control>\n                                </div>\n                            </Form.Group>\n                        </Form>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n        </div>\n    );\n}","import React from 'react';\nimport Spinner from 'react-bootstrap/Spinner';\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\n//Component to display preview of all listings\nexport function ListingPage(props) {\n\n    //Created a copy of the array from the second API request.\n    let data = Array.from(props.posts);\n\n    //Maps the array of listings into divs that link to the third page, which is the details of the listings.\n    let listings = data.map((value, index) => {\n\n        //Changing the images from low quality to high quality if image is available, otherwise display image not available.\n        let img = value.thumbnail;\n        let highResImg\n        if (img) {\n            highResImg = img.replace('x.jpg', 'od-w1024_h768.jpg');\n        }\n        else {\n            highResImg = 'https://lh3.googleusercontent.com/proxy/O4vnnaN0zxxGnhWOi0k4H2sZTNs4LiHF6Jkn6D-0N7LQLBg75trpvcoP-YoJzPhxrcu3ScWUcUe-75T8gUO3D7hkdI4H-zv62wmG0oGzV7lgKG54PedynZviGND5RQcSrCFRQ50';\n        }\n\n        //Declaring variable to hold value of MLS property ID to add to the end of the URL\n        let propertyID = value.property_id;\n\n        return <Link key={index}\n            //Adding property ID to url, and sending state to third page. Also return div for each listing with a background image of the listing.\n            to={{\n                pathname: '/:city/' + propertyID,\n                state: { from: props.location, listing: { value }, dataRecieved: props.dataRecieved },\n            }}>\n            <div className=\"preview\"\n                style={{\n                    backgroundImage: `url(${highResImg})`,\n                    backgroundSize: 'cover',\n                    overflow: 'hidden',\n                    margin: 15,\n                    backgroundPosition: 'center'\n                }}>\n                <div className=\"listingPreviewText\">\n                    {value.address.line + ', ' + value.address.postal_code}\n                    <br></br>\n                    {'$' + props.numberWithCommas(value.price)}\n                </div>\n            </div>\n        </Link>\n    });\n\n    //Using bootstrap spinner until listings load\n    let loading = (<Spinner animation=\"border\" size=\"10\" />)\n\n    return (\n        <div id=\"listingsContainer\">\n            {props.dataRecieved ? listings : loading}\n        </div>\n    );\n}\n","import React from 'react';\n\n//Component to paginate the listings\nexport const Pagination = ({ postsPerPage, totalPosts, paginate }) => {\n\n    //Create array of page numbers and calculate how many pages needed through total posts and posts per page.\n    const pageNumbers = [];\n    for (let i = 1; i <= Math.ceil(totalPosts / postsPerPage); i++) {\n        pageNumbers.push(i);\n    }\n\n    //returns list of clickable elements to seperate pages of listings.\n    return (\n        <nav className=\"pagination\">\n            <ul className='pagination'>\n                {pageNumbers.map(number => (\n                    <li key={number} className='page-item'>\n                        <a onClick={(e) => {\n                            e.preventDefault();\n                            return paginate(number)\n                        }\n                        } href='!#' className='page-link'>\n                            {number}\n                        </a>\n                    </li>\n                ))}\n            </ul>\n        </nav>\n    );\n};\n\n","import React, { useState, useEffect, useLocation } from 'react';\nimport '../../Stylesheets/ResultsPage.scss';\nimport { FilterResults } from '../../Components/FilterResults/FilterResults';\nimport { ListingPage } from '../ListingPage/ListingPage';\nimport { Pagination } from '../../Components/Pagination/Pagination';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button';\n\n//ResultsPage component which is the second page of the application, which previews all the listings, and allows user to filter the results.\nexport function ResultsPage(props) {\n\n    //Declaring all states with useState hook\n    const [minPrice, setMinPrice] = useState(null);\n    const [maxPrice, setMaxPrice] = useState(null);\n    const [sort, setSort] = useState('price_high');\n    const [dataRecieved, setDataRecieved] = useState(false);\n    const [minSqft, setMinSqft] = useState(null);\n    const [maxSqft, setMaxSqft] = useState(null);\n    const [minBedrooms, setMinBedrooms] = useState(null);\n    const [minBathrooms, setMinBathrooms] = useState(null);\n    const [propertyType, setPropertyType] = useState(null);\n    const [postsPerPage, setPostsPerAge] = useState(16);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [posts, setPosts] = useState([]);\n\n    //Creating history variable from useHistory hook to go back and forth between pages.\n    let history = useHistory();\n\n    //Function used to format numbers with commas for every 3 digits.\n    const numberWithCommas = (x) => {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n\n    //Function to call API to get array of listings\n    const getListings = async () => {\n        //Used previous API call to get cityListings, and stateListings.\n        let response = await fetch(`https://realtor.p.rapidapi.com/properties/v2/list-for-sale?city=${props.location.state.cityListings}&limit=200&offset=0&state_code=${props.location.state.stateListings}&sort=${sort}&price_max=${maxPrice}&price_min=${minPrice}&sqft_min=${minSqft}&sqft_max=${maxSqft}&beds_min=${minBedrooms}&baths_min=${minBathrooms}&prop_type=${propertyType}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"f47832579dmshbd8a9344b7fcbc4p1911d1jsn045b1327ed4c\",\n                \"x-rapidapi-host\": \"realtor.p.rapidapi.com\"\n            }\n        });\n        let jsonResponse = await response.json();\n        let listings = jsonResponse.properties;\n        //Setting state to the recieved array of listings from the API, and setting dataRecieved to true.\n        setPosts(listings);\n        setDataRecieved(true);\n\n    }\n\n\n\n    //useEffect hook to call API again if user wants to fitler results through FilterResults Component, or if userInput state is changed from previous change.\n    useEffect(() => {\n        if (props.location.state.cityListings && props.location.state.stateListings) {\n            getListings();\n        }\n    }, [props.location.state.userInput, minPrice, maxPrice, sort, minSqft, maxSqft, minBathrooms, minBedrooms, propertyType]);\n\n    //For pagination of the listings.\n    const paginate = pageNumber => setCurrentPage(pageNumber);\n    const indexOfLastPost = currentPage * postsPerPage;\n    const indexOfFirstPost = indexOfLastPost - postsPerPage;\n    const currentPosts = posts.slice(indexOfFirstPost, indexOfLastPost);\n\n\n\n    //Returns three differennt components, FilterResuls for filtering results, ListingPage to display preview of listings, Pagination to paginate to seperate listings into seperate pages.\n    return (\n        <div className=\"resultsPage\">\n            <p>Property-Finder 1.0</p>\n            <div id=\"listingPage\">\n                <FilterResults setSort={setSort} setMinPrice={setMinPrice} setMaxPrice={setMaxPrice} numberFormat={numberWithCommas} setMinSqft={setMinSqft} setPropertyType={setPropertyType} setMaxSqft={setMaxSqft} setMinBedrooms={setMinBedrooms} setMinBathrooms={setMinBathrooms} />\n                <ListingPage userInput={props.location.state.userInput} posts={currentPosts} cities={props.location.state.cities} numberWithCommas={numberWithCommas} dataRecieved={dataRecieved} />\n                <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} paginate={paginate} />\n            </div>\n            <Button id=\"goBack\" onClick={() => history.goBack()} variant=\"primary\" > Back </Button>\n        </div>\n\n    );\n}","import React, { useState } from 'react';\r\nimport Carousel from 'react-bootstrap/Carousel';\r\n\r\n\r\n\r\n//Bootstrap Carousel to display pictures of the listing.\r\nexport function ControlledCarousel(props) {\r\n\r\n    const [index, setIndex] = useState(0);\r\n\r\n    const handleSelect = (selectedIndex, e) => {\r\n        setIndex(selectedIndex);\r\n    };\r\n\r\n    //Maps array of pictures into Carousel Items\r\n    let carouselItems\r\n    if (props.picturesRecieved) {\r\n        carouselItems = props.pictures.photos.map((value, index) => {\r\n            let img = value.href;\r\n            //Replaces low res image links provided from API with higher quality links.    \r\n            let highResImg = img.replace('x.jpg', 'od-w1024_h768.jpg');\r\n            return <Carousel.Item key={index}>\r\n                <img\r\n                    className=\"d-block w-100\"\r\n                    src={highResImg}\r\n                    alt=\"Third slide\" />\r\n            </Carousel.Item>\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Carousel activeIndex={index} id=\"myCarousel\" onSelect={handleSelect}>\r\n            {carouselItems}\r\n        </Carousel>\r\n    );\r\n}","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { ControlledCarousel } from '../Carousel/Carousel';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button'\nimport Spinner from 'react-bootstrap/Spinner';\nimport Figure from 'react-bootstrap/Figure';\nimport Card from 'react-bootstrap/Card';\nimport Table from 'react-bootstrap/Table'\nimport '../../Stylesheets/ListingPage.scss';\n\n//Component is the third page, and displays the listings with all pictures and details.\nexport function Results(props) {\n\n    //Declaring state to store pictures of the listing, and a boolean to show if pictures have been recieved.\n    const [pictures, setPictures] = useState([]);\n    const [picturesRecieved, setPicturesRecieved] = useState(false);\n\n    //Declaring history variable from useHistory hook to go back and forth between pages.\n    let history = useHistory();\n\n    //Declare variable to store data object from 2nd API call\n    let value\n    if (props.location.state.dataRecieved) {\n        value = props.location.state.listing.value;\n    }\n\n    //function used to format numbers with commas. Could not send functions through React router Link which is why I had to create this function twice.\n    const numberWithCommas = (x) => {\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n    }\n\n    //function to get third API call which gets the information and pictures of the listing.\n    const getPictures = async () => {\n        if (value.property_id) {\n            let response = await fetch(`https://realtor.p.rapidapi.com/properties/v2/detail?property_id=${value.property_id}`, {\n                \"method\": \"GET\",\n                \"headers\": {\n                    \"x-rapidapi-key\": \"f47832579dmshbd8a9344b7fcbc4p1911d1jsn045b1327ed4c\",\n                    \"x-rapidapi-host\": \"realtor.p.rapidapi.com\"\n                }\n            })\n            let jsonResponse = await response.json();\n            let pictures = jsonResponse.properties;\n            //Set pictures state to the array of pictures and set picturesRecieved to true.\n            setPictures(pictures[0]);\n            setPicturesRecieved(true);\n        }\n    }\n\n    const handleClick = () => {\n        window.location.assign(pictures.virtual_tour.href);\n    }\n\n    //useEffect to call getPictures function to get pictures of the listings\n    useEffect(() => {\n        if (value.property_id) {\n            getPictures();\n        }\n    }, [value.property_id]);\n\n\n\n    //if virtual tour link is available from API then set virtualTour variable to button with link to virtual tour of listing..\n    let virtualTour;\n    if (pictures.virtual_tour) {\n        virtualTour = (\n            <Button id=\"virtualTour\" variant=\"primary\" size=\"lg\" block onClick={handleClick}>\n                Virtual Tour\n            </Button>);\n    }\n    else {\n        virtualTour = null;\n    }\n\n\n    //if picturesRecieved state is true, then set description variable to listing info.\n    let description\n    if (picturesRecieved) {\n        //These variables were not always available from API so this checks to see if the data is available before assigning it to the variables.\n        let lowRes;\n        let highRes;\n        let lotSize;\n        let taxHistory;\n        let buildingSize;\n        let beds;\n        let baths;\n        let garage;\n        let year_built;\n        let stories;\n\n        if (pictures.garage) {\n            garage = pictures.garage;\n        }\n\n        if (pictures.year_built) {\n            year_built = pictures.year_built;\n        }\n\n        if (pictures.stories) {\n            stories = pictures.stories;\n        }\n\n        if (pictures.baths) {\n            baths = pictures.baths;\n        }\n\n        if (pictures.beds) {\n            beds = pictures.beds;\n        }\n\n        if (pictures.building_size) {\n            buildingSize = numberWithCommas(pictures.building_size.size) + ' Sqft';\n        }\n\n        if (pictures.agents[0].photo) {\n            lowRes = pictures.agents[0].photo.href;\n            highRes = lowRes.replace('x.jpg', 'od-w1024_h768.jpg');\n        }\n\n        if (pictures.lot_size) {\n            lotSize = numberWithCommas(pictures.lot_size.size);\n        }\n\n        if (pictures.tax_history[0]) {\n            taxHistory = '$' + numberWithCommas(pictures.tax_history[0].tax);\n\n        }\n\n\n\n        //The description variable returns the entire page of information of the selected listing. Contains following Bootstrap components: Carousel, ListGroup, Figure, Card, Button.\n        description = (<div>\n            <p id=\"Logo\">Property-Finder 1.0</p>\n            <h1>{value.address.line}</h1>\n            <h2>{value.address.postal_code + ', ' + value.address.city + ' ,' + value.address.state}</h2>\n            <h3>{'$' + numberWithCommas(value.price)}</h3>\n            <div className=\"bodyContainer\">\n                <ControlledCarousel pictures={pictures} picturesRecieved={picturesRecieved} />\n                <Figure>\n                    <Figure.Caption>\n                        {pictures.description}\n                    </Figure.Caption>\n                </Figure>\n                {virtualTour}\n                <Table striped bordered hover>\n                    <thead id='tableHeader'>\n                        <tr>\n                            <th colSpan=\"2\">Property Overview</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td>Bedrooms</td>\n                            <td className=\"secondCol\">{beds}</td>\n\n                        </tr>\n                        <tr>\n                            <td>Bathrooms</td>\n                            <td className=\"secondCol\">{baths}</td>\n\n                        </tr>\n                        <tr>\n                            <td>House Size</td>\n                            <td className=\"secondCol\">{buildingSize}</td>\n                        </tr>\n                        <tr>\n                            <td>Lot Size</td>\n                            <td className=\"secondCol\">{lotSize}</td>\n\n                        </tr>\n                        <tr>\n                            <td>Garages</td>\n                            <td className=\"secondCol\">{garage}</td>\n\n                        </tr>\n                        <tr>\n                            <td>Year Built</td>\n                            <td className=\"secondCol\">{year_built}</td>\n                        </tr>\n                        <tr>\n                            <td>Stories</td>\n                            <td className=\"secondCol\">{stories}</td>\n\n                        </tr>\n                        <tr>\n                            <td>Property Tax</td>\n                            <td className=\"secondCol\">{taxHistory}</td>\n                        </tr>\n                    </tbody>\n                </Table>\n            </div>\n            <Card.Header as=\"h5\">Listing Agent</Card.Header>\n            <Card id=\"Card\">\n\n                <Card.Body>\n                    <Card.Title>{pictures.branding.listing_agent.details.name}</Card.Title>\n                    <Card.Img variant=\"top\" src={highRes} width=\"30px\" id=\"cardImg\" />\n                    <Card.Text>\n                        {pictures.agents[0].email}\n                    </Card.Text>\n                    <Card.Text>\n                        {pictures.branding.listing_agent.details.phone}\n                    </Card.Text>\n                    <Button variant=\"primary\" onClick={() => {\n                        window.location.assign(pictures.agents[0].href);\n                    }}>Agent Website</Button>\n                </Card.Body>\n                <Card.Body>\n                    <Card.Title>{pictures.broker.name}</Card.Title>\n                    <Card.Img variant=\"top\" src={pictures.branding.listing_office.details.photo} width=\"30px\" id=\"cardImg\" />\n                    <Card.Text>\n                        {pictures.branding.listing_office.details.phone}\n                    </Card.Text>\n                    <Card.Text>\n                        {pictures.branding.listing_agent.details.phone}\n                    </Card.Text>\n                </Card.Body>\n            </Card>\n            <Button id=\"backButton\" onClick={() => history.goBack()}>Back</Button>\n        </div>);\n    }\n\n    //Uses Bootsrap spinner until data is recieved from API\n    let loading = (<Spinner animation=\"border\" id=\"spinner\" size=\"10\" />)\n\n\n\n    //Returns Spinner from bootstrap if picturesRecieved is false.\n    return (\n        <div className=\"result\">\n            { picturesRecieved ? description : loading}\n        </div>\n    )\n}","import React from 'react';\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\nimport Button from 'react-bootstrap/Button'\nimport Form from 'react-bootstrap/Form'\nimport ListGroup from 'react-bootstrap/ListGroup'\n\n\n//Creating AutoComplete component to give the user suggestions to cities, and provide the parameters in the URL for the next API request.\nexport function Autocomplete(props) {\n\n    //When user begins to type this function changes state of userInput to what the user has typed. Also sets ShowOptions to true, which shows the list of suggestions.\n    const onChange = (e) => {\n        props.setUserInput(e.currentTarget.value);\n        props.setShowOptions(true);\n    };\n\n\n    //Declared optionList to either equal list of suggestions from API, or show No Option.\n    let optionList;\n    if (props.showOptions && props.userInput) {\n        if (props.cityArray) {\n            optionList = props.cityArray.map((value, index) => {\n                return <ListGroup.Item key={index} onClick={() => {\n                    props.setStateListings(value.state_code);\n                    props.setCityListings(value.city);\n                    props.setShowOptions(false);\n                    props.setUserInput(value.city + ', ' + value.state_code);\n                }}>{value.city + ', ' + value.state_code}</ListGroup.Item>\n            });\n        } else {\n            optionList = (\n                <div className=\"no-options\">\n                    <em>No Option!</em>\n                </div>\n            );\n        }\n    }\n\n    //React router link to the next component which is ResultsPage. Input and button, and list are styled with Bootstrap.\n    return (\n        <React.Fragment>\n            <div className=\"search\">\n                <Form.Control id=\"autocomplete\" autoComplete=\"off\" onChange={onChange}\n                    value={props.userInput} size=\"lg\" type=\"text\" placeholder=\"Select City From Suggestions\" />\n                <Link to={{\n                    pathname: '/' + props.cityListings,\n                    state: { from: props.location, cityListings: props.cityListings, stateListings: props.stateListings, userInput: props.userInput, cities: props.cities, dataRecieved: props.dataRecieved }\n                }}>\n                    <Button variant=\"primary\" size=\"lg\">Search</Button>\n                </Link>\n            </div>\n            <ListGroup variant=\"flush\">\n                {optionList}\n            </ListGroup>\n        </React.Fragment>\n    );\n}\n\n","import React, { useEffect, useState } from 'react'\nimport { Autocomplete } from '../../Components/Autocomplete/Autocomplete';\nimport '../../Stylesheets/SearchPage.scss';\n\n//Created a SearchPage functional component, which will be the first page of my website.\nexport function SearchPage() {\n\n    //Declared all my states using hooks\n    const [userInput, setUserInput] = useState('');\n    const [showOptions, setShowOptions] = useState(false);\n    const [cities, setCities] = useState([]);\n    const [cityListings, setCityListings] = useState('');\n    const [stateListings, setStateListings] = useState('');\n\n\n    //Function for calling Realtor Api through Rapid API\n    const getData = async () => {\n        let response = await fetch(`https://realtor.p.rapidapi.com/locations/auto-complete?input=${userInput}`, {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"x-rapidapi-key\": \"f47832579dmshbd8a9344b7fcbc4p1911d1jsn045b1327ed4c\",\n                \"x-rapidapi-host\": \"realtor.p.rapidapi.com\"\n            }\n        })\n\n        let jsonResponse = await response.json();\n        let cities = jsonResponse.autocomplete;\n\n        //Setting the cities state to the first 6 elements in array returned from the API\n        let items = cities.slice(0, 3);\n        setCities(items);\n    }\n\n\n\n    //Using a useEffect hook to call the function, which calls the API whenever userInput state is changed.\n    useEffect(() => {\n        //Call getData() function only if userInput is not empty, to avoid calling API on initial rendering.\n        if (userInput !== '') {\n            getData();\n        }\n\n    }, [userInput]);\n\n\n\n    return (\n        <div id=\"searchBox\">\n            <p>Property-Finder 1.0</p>\n            <div className=\"searchBoxContainer\">\n                <h2>Enter name of city</h2>\n                <Autocomplete userInput={userInput} cityArray={cities} setUserInput={setUserInput}\n                    showOptions={showOptions}\n                    setShowOptions={setShowOptions}\n                    setCityListings={setCityListings}\n                    setStateListings={setStateListings}\n                    cityListings={cityListings}\n                    stateListings={stateListings}\n                    cities={cities} />\n            </div>\n        </div>\n    );\n}","import './App.scss';\nimport { ResultsPage } from '../src/Containers/ResultsPage/ResultsPage';\nimport { Route, Switch } from 'react-router-dom';\nimport { Results } from '../src/Components/Results/Results';\nimport { SearchPage } from '../src/Containers/SearchPage/SearchPage';\n\nfunction App() {\n  return (\n    <main>\n      <Switch>\n        <Route path=\"/\" component={SearchPage} exact />\n        <Route path=\"/:city\" component={ResultsPage} exact />\n        <Route path=\"/:city/:listingNumber/\" component={Results} />\n      </Switch>\n    </main>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}